Lista de Exerc√≠cios 1 ‚Äì Ponteiros
Aluno: Ricardo Martins Ven√¢ncio Varela - (Matricula: 20160108323)


<<<<<<< HEAD
QUEST√O 1 -  A partir do uso de ponteiros, podemos localizar o endereÁo de memÛria de uma determinada vari·vel, 
dessa forma podemos acessar uma vari·vel em diferentes partes de um programa, sendo ˙teis em v·rias situaÁıes: 
AlocaÁ„o din‚mica de memÛria, manipulaÁ„o de Arrays, entre outras utilidades.
=======
QUEST√ÉO 1 -  A partir do uso de ponteiros, podemos localizar o endere√ßo de mem√≥ria de uma determinada vari√°vel, 
dessa forma podemos acessar uma vari√°vel em diferentes partes de um programa, sendo √∫teis em v√°rias situa√ß√µes:
Aloca√ß√£o din√¢mica de mem√≥ria, manipula√ß√£o de Arrays, entre outras utilidades.
>>>>>>> 4b7741e2ff1c0cc13e0ee253f6014ec0004c6e62

QUEST√ÉO 2 - 

int i=3,j=5; 
int *p, *q;
p = &i; // O valor de p √© o endere√ßo de i
q = &j; // O valor de q √© o endere√ßo de j

p == &i; // Verdadeiro, p recebe o endere√ßo de i. 
Valor da express√£o = 6356740.

*p - *q; // *p igual ao conte√∫do em p e *q igual ao conte√∫do em q.
Valor da express√£o = -2.

**&p; // O ponteiro p para um ponteiro que apontar√° para um inteiro, o conte√∫do do endere√ßo de p √© o endere√ßo de i.
Valor da express√£o = 3.

3 - *p/(*q) + 7; // Valor da express√£o = 10.

QUEST√ÉO 3 ‚Äì 

int i=5, *p;
p = &i;
printf("%x %d %d %d %d", p,*p+2,**&p,3**p,**&p+4);
}


Supondo que i ocupa o endere√ßo 4094 na mem√≥ria, obtive os seguintes resultados:


p = 4096;
*p+2 = 7;
**&p = 5;
3**p= 15;
**p&p+4 = 9;

QUEST√ÉO 4 - 

p = i; // Atribui√ß√£o legal, p recebe o valor de i.
q = &j; // Atribui√ß√£o legal, q recebe o endere√ßo de j.
p = &*&i; // Atribui√ß√£o legal. 
i = (*&)j; //Atribui√ß√£o ilegal, devido ao uso do par√™nteses
i = *&j; // Atribui√ß√£o legal. 
i = *&*&j; Atribui√ß√£o legal, √© executado.
q = *p; // Atribui√ß√£o ilegal.
i = (*p)++ + *q; Atribui√ß√£o legal, sabendo que p e j recebem o valor de i e j.

QUEST√ÉO 5 - 

int main() {
  int    valor;
  int   *p1;
  float  temp;
  float *p2;
  char   aux;
  char  *nome = "Ponteiros";
  char  *p3;
  int    idade;
  int    vetor[3];
  int   *p4;
  int   *p5;


// A quest√£o pede para determinar os valores para os seguintes problemas abaixo:



/* (a) */
  valor = 10;
  p1 = &valor;
  *p1 = 20;
  printf("%d \n", valor); 
// ?  Valor encontrado = 20

  /* (b) */
  temp = 26.5;
  p2 = &temp;
  *p2 = 29.0;
  printf("%.1f \n", temp); 
// ? temp = 29.0

  
/* (c) */
  p3 = &nome[0];
  aux = *p3;
  printf("%c \n", aux); 
// ? aux = P

  /* (d) */
  p3 = &nome[4];
  aux = *p3;
  printf("%c \n", aux); 
// ? aux = e

  /* (e) */
  p3 = nome;
  printf("%c \n", *p3); 
// ? *p = P

  /* (f) */
  p3 = p3 + 4;
  printf("%c \n", *p3); 
// ? p3 = e

  /* (g) */
  p3--;
  printf("%c \n", *p3); 
// ? p3 = t;

  /* (h) */
  vetor[0] = 31;
  vetor[1] = 45;
  vetor[2] = 27;
  p4 = vetor;
  idade = *p4;
  printf("%d \n", idade); 
// ? idade = 31

  /* (i) */
  p5 = p4 + 1;
  idade = *p5;
  printf("%d \n", idade); 
// ? idade = 45

 
 /* (j) */
  p4 = p5 + 1;
  idade = *p4;
  printf("%d \n", idade); 
// ? idade = 27

  /* (l) */
  p4 = p4 - 2;
  idade = *p4;
  printf("%d \n", idade); 
// ? idade =31

  /* (m) */
  p5 = &vetor[2] - 1;
  printf("%d \n", *p5); 
// ?*p5 =45

  /* (n) */
  p5++;
  printf("%d \n", *p5); 
  return(0);
// ? *p5 =27

return 0;

}


QUEST√ÉO 6 - Fazendo a compila√ß√£o do programa, foi encontrado:

contador/valor/valor/endereco/endereco
i = 0vet[0] = 1.1*(f + 0) = 1.1&vet[0] = 60FEF4(f + 0) = 60FEF4
i = 1vet[1] = 2.2*(f + 1) = 2.2&vet[1] = 60FEF8(f + 1) = 60FEF8
i = 2vet[2] = 3.3*(f + 2) = 3.3&vet[2] = 60FEFC(f + 2) = 60FEFC
i = 3vet[3] = 4.4*(f + 3) = 4.4&vet[3] = 60FF00(f + 3) = 60FF00
i = 4vet[4] = 5.5*(f + 4) = 5.5&vet[4] = 60FF04(f + 4) = 60FF04


<<<<<<< HEAD
QUEST√O 7 - Fazendo os testes no compilador, a seguinte express„o faz referÍncia ao valor do terceiro elemento do vetor:
*(pulo + 2); Pois, ìpuloî est· apontando para o primeiro endereÁo, acrescentando o +2, 
ir· para o terceiro elemento do vetor, j· fora dos parÍnteses o * vai mostrar o conte˙do da terceira posiÁ„o.


QUEST√O 8 - 
p = mat + 1; //Essa express„o È v·lida. Pois ela mostra o endereÁo de memÛria do vetor da posiÁ„o seguinte (+1).

p = mat++; //Essa express„o n„o È v·lida. Pois o comando È de incremento, essa operaÁ„o n„o È permitida para o que queremos fazer. 
=======
QUEST√ÉO 7 - Fazendo os testes no compilador, a seguinte express√£o faz refer√™ncia ao valor do terceiro elemento do vetor: *(pulo + 2);
Pois, ‚Äúpulo‚Äù est√° apontando para o primeiro endere√ßo, acrescentando o +2, ir√° para o terceiro elemento do vetor, j√° fora dos par√™nteses o * vai mostrar o conte√∫do da terceira posi√ß√£o.


QUEST√ÉO 8 - 
p = mat + 1; // Essa express√£o √© v√°lida. Pois ela mostra o endere√ßo de mem√≥ria do vetor da posi√ß√£o seguinte (+1).

p = mat++; // Essa express√£o n√£o √© v√°lida. Pois o comando √© de incremento, essa opera√ß√£o n√£o √© permitida para o que queremos fazer. 
>>>>>>> 4b7741e2ff1c0cc13e0ee253f6014ec0004c6e62

p = ++mat; // Essa express√£o n√£o √© v√°lida. Segue o mesmo racioc√≠nio da anterior, n√£o √© poss√≠vel realocar.

x = (*mat)++; Essa express√£o √© v√°lida. Pois, pleo fator de * ser usado , ‚Äúx‚Äù recebe o conte√∫do da vari√°vel mais um (+1).
 

<<<<<<< HEAD
QUEST√O 9 -
No primeiro caso, como * foi usado na printf, ou seja, durante a implementaÁ„o do conte˙do, 
seu uso serviu para mostrar o valor das vari·veis de cada posiÁ„o do vetor.
=======
QUEST√ÉO 9 -
	No primeiro caso, como * foi usado na printf, ou seja, durante a implementa√ß√£o do conte√∫do, seu uso serviu para mostrar o valor das vari√°veis de cada posi√ß√£o do vetor.
>>>>>>> 4b7741e2ff1c0cc13e0ee253f6014ec0004c6e62
	
No segundo caso, ao retirar *, foi exibido para o usu√°rio o endere√ßo das vari√°veis de cada posi√ß√£o do vetor.

QUEST√ÉO 10 - 

Char: 4092 +1; 4092 + 2; 4092 +3;
Int: 4092 + 2; 4092 + 4; 4092 + 6;
Float: 4092 + 4; 4092 + 8; 4092 + 12;
Double: 4092 + 8; 4092 + 16; 4092 + 24;

QUEST√ÉO 11-

<<<<<<< HEAD
Na pr·tica, fizemos os testes utilizando: Char, int, float e double. 
Ao compilar o programa, foi obtido os seguintes resultados:
=======
Na pr√°tica, fizemos os testes utilizando: Char, int, float e double. Ao compilar o programa, foi obtido os seguintes resultados:
>>>>>>> 4b7741e2ff1c0cc13e0ee253f6014ec0004c6e62

Char: 1 Byte ? 6356747 ; 6356748 ; 6356749 ;
Int: 4 Bytes ? 6356732; 6356736; 6356740;
Float: 4 Bytes ? 6356740; 6356744; 6356748;
Double: 8 Bytes ? 6356712; 6356720 ; 6356728;

QUEST√ÉO 12 -

float aloha[10], coisas[10][5], *pf, value = 2.2;
int i=3;
// Identificar quais dos seguintes comandos √© v√°lido ou inv√°lido:


aloha[2] = value; // V√°lido, pois recebe 2.2;
scanf("%f", &aloha); // V√°lido, o conte√∫do vai para o endere√ßo de aloha[0].
aloha = value"; Inv√°lidos, pois aloha √© um ponteiro.
printf("%f", aloha); Inv√°lido, pois retorna o primeiro elemento do vetor que n√£o pode ser do tipo float
coisas[4][4] = aloha[3]; V√°lido.
coisas[5] = aloha; Inv√°lido, pois √© uma matriz e n√£o um vetor.
pf = value; Inv√°lido, pois ‚Äúpf‚Äù √© um ponteiro de float.
pf = aloha; V√°lido.

QUEST√ÉO 13 -

<<<<<<< HEAD
Com base nos conhecimentos adquiridos por meio da pesquisa ao tema, 
ponteiros para funÁıes trabalha passando uma funÁ„o como par‚metro para outra funÁ„o, ou seja,
o programador pode ter acesso ao determinado endereÁo de uma funÁ„o.

=======
Com base nos conhecimentos adquiridos por meio da pesquisa ao tema, ponteiros para fun√ß√µes trabalha passando uma fun√ß√£o como par√¢metro para outra fun√ß√£o, ou seja, o programador pode ter acesso ao determinado endere√ßo de uma fun√ß√£o.
>>>>>>> 4b7741e2ff1c0cc13e0ee253f6014ec0004c6e62
Exemplificando melhor com um simples programa, temos:


		#include <stdio.h>
		#include<stdlib.h>
		#include<math.h>
		


		#define pi 3.14
		


		   int divisao (int a, int b);
		   int (*divi)(int,int) = divisao;
		   int operacao (int x, int y, int (*func)(int, int));
		


		   int main(void){
		       int result_1=0;
		       result_1 = operacao(1, 1, divi);
		       printf("Valor da operacao = %d", result_1);
		        return 0;
		}
		   int divisao(int a, int b){
		       return(a/b);
		   }
		   int operacao(int x, int y, int (*func)(int, int)){
		       int op=0, angulo=0;
		       int valor =0;
		       valor = 180/pi;
		       op = func(x, y);
		       angulo = atan(op) * valor;
		       return(angulo);
		   }

QUEST√ÉO 14 -

Utilizando os conhecimentos a respeito de Malloc para realizar a tarefa, temos:

#include <stdio.h>
#include <stdlib.h>

int main(void){
  float *ptr;
  int n, i, j, aux;
  n = 4;
  ptr = (float*) malloc(n*sizeof(float));

  for(j=0;j<n;j++){
      scanf("%f",&ptr[j]);
  }

  for(i=0; i<n; i++){
      for (j=i+1;j<n;j++){
          if(ptr[i]>ptr[j]){
          aux =ptr[i];
          ptr[i]= ptr[j];
          ptr[j]=aux;
          }
      }
  }
  for(j=0;j<n;j++){
      if(j==n-1){
      printf("%1f ",ptr[j]);
      }
      else  {
          printf("%1f, ",ptr[j]);
      }
  }
free(ptr);
return 0;
}
QUEST√ÉO 15 -

<<<<<<< HEAD
Com base nos estudos a respeito da funÁ„o qsort(), 
a sua utilizaÁ„o visa ordenar qualquer vetor em qualquer ordem escolhida.

->	qsort(vetor,quantidade,tamanho,funÁ„o);
=======
Com base nos estudos a respeito da fun√ß√£o qsort(), a sua utiliza√ß√£o visa ordenar qualquer vetor em qualquer ordem escolhida.

?	qsort(vetor,quantidade,tamanho,fun√ß√£o);
>>>>>>> 4b7741e2ff1c0cc13e0ee253f6014ec0004c6e62

Fazendo a implementa√ß√£o dessa fun√ß√£o no programa anterior, temos:

#include <stdio.h>
#include <stdlib.h>

int comparador (const void *a, const void *b){
    
return (*(int*)a - *(int*)b);  

<<<<<<< HEAD
// Nesse passo ocorre a convers„o do valor dos par‚metros para inteiro e adentra o conte˙do da vari·vel.  
Se for positivo, ìaî È maior que ìbî, ent„o realiza a troca, j· se for negativo, ìaî È menor que ìbî, 
faz as trocas necess·rias para ordenar. 
=======
// Nesse passo ocorre a convers√£o do valor dos par√¢metros para inteiro e adentra o conte√∫do da vari√°vel.  Se for positivo, ‚Äúa‚Äù √© maior que ‚Äúb‚Äù, ent√£o realiza a troca, j√° se for negativo, ‚Äúa‚Äù √© menor que ‚Äúb‚Äù, faz as trocas necess√°rias para ordenar. 
>>>>>>> 4b7741e2ff1c0cc13e0ee253f6014ec0004c6e62

}

int main(void){
  float *ptr;
  int n, i, j, aux;
  n = 4;
  ptr = (float*) malloc(n*sizeof(float));

  for(j=0;j<n;j++){
      scanf("%f",&ptr[j]);
  }
  
qsort(ptr, n, sizeof(float), comparador); 

<<<<<<< HEAD
// ìptrî È o endereÁo do Array que ser· ordenado, j· ìnî È o tamanho do Array (quantidade), 
ìsizeof(float)î È o tamanho, dada em bytes, de cada posiÁ„o do Array, 
ìcomparadorî È o ponteiro para a funÁ„o de comparaÁ„o que recebe dois par‚metros.
=======
// ‚Äúptr‚Äù √© o endere√ßo do Array que ser√° ordenado, j√° ‚Äún‚Äù √© o tamanho do Array (quantidade), ‚Äúsizeof(float)‚Äù √© o tamanho, dada em bytes, de cada posi√ß√£o do Array, ‚Äúcomparador‚Äù √© o ponteiro para a fun√ß√£o de compara√ß√£o que recebe dois par√¢metros.
>>>>>>> 4b7741e2ff1c0cc13e0ee253f6014ec0004c6e62

for(i=0;j<n;j++){
      printf("%f",ptr[i]);
  }

  free(ptr);
  return 0;
}

QUEST√ÉO 16 -

#include <stdio.h>
#include <stdlib.h>
 
int comparador (const void *a, const void *b) {
   return ( *(int*)a - *(int*)b );
}
 
int comparador2(const void *a, const void *b) {
   
   if (*(int*)a > *(int*)b) {
      return 1;
   } else if (*(int*)a < *(int*)b) {
      return -1;
   } else {
      return 0;
   }
}
 
int main (void) {
   int i, array[] = { 6, 12, 3, 9, 24, 42 };

   qsort(array, 6, sizeof(int), comparador);

   for( i = 0 ; i < 6; i++ ) {
      printf("%i ", array[i]);
   }
 
   return(0);
}

QUEST√ÉO 17 -

<<<<<<< HEAD
Alguns dos mecanismos que possibilitam medir tempos de execuÁ„o de rotinas computacionais, 
pode ser pela biblioteca lib time.h, calculando quanto tempo demorou para o determinado programa
 executar com base no hor·rio que iniciou a compilaÁ„o atÈ o hor·rio do tÈrmino da compilaÁ„o. 
Para isso podemos usar dois operadores que possibilitam executar a mediÁ„o, o time(NULL) e o clock().
Fazendo os testes no programas anteriores, foi usado:

float tempo;
time_t   time_ini, time_f;
time_ini = time(NULL);
time_f = time(NULL);
tempo = difftime(time_f, time_ini);

Com isso foram obtidos resultados entre 0.7s e 2.0s no primeiro programa, 
de acordo com o tÈrmino da execuÁ„o do programa e j· no segundo caso, algo em torno de 0.1s 

=======
Alguns dos mecanismos que possibilitam medir tempos de execu√ß√£o de rotinas computacionais, pode ser pela biblioteca lib time.h, calculando quanto tempo demorou para o determinado programa executar com base no hor√°rio que iniciou a compila√ß√£o at√© o hor√°rio do t√©rmino da compila√ß√£o.
>>>>>>> 4b7741e2ff1c0cc13e0ee253f6014ec0004c6e62


QUEST√ÉO 18 -

#include <stdio.h>
#include <stdlib.h>

void soma(int *a, int *b, int*c, int tamanho);

int main(void){
 int *x, *y,*vet;
 int tam=4;
 int i=0,j=0;
   x = (int*) malloc(tam*sizeof(int));
   y = (int*) malloc(tam*sizeof(int));
   vet = (int*) malloc(tam*sizeof(int));

        for(j=0;j<tam;j++){
           printf("Digite o valor de x[%d]\n",j);
           scanf("%d",&x[j]);
         }
        for(i=0;i<tam;i++){
           printf("Digite o valor de y[%d]\n",i);
           scanf("%d",&y[i]);
         }
          soma(x,y,vet,tam);
 return 0;
 free(x);
 free(y);
 free(vet);
}
void soma(int *a, int *b, int *c, int tamanho){
   int j=0, i=0;
   for(j=0; j<tamanho; j++){
        *(c+j)=*(a+j) + *(b+j);
   }

   for(i=0;i<tamanho;i++){
       printf("Valor de vet[%d] e: %d ",i,*(c+i));
     }
}

QUEST√O 20 - 

O libGC (Garbage Collector) que implementa um coletor de lixo C, tem como finalidade substituir o malloc. 
Resumidamente, o que ela faz È a alocaÁ„o de memÛria, sem desalocar a memÛria que n„o È mais ˙til.
Por meio de algumas pesquisas sobre a biblioteca libGC e sua construÁ„o, um exemplo abaixo de demonstraÁ„o:

#include "gc.h" // Biblioteca GC (Garbage Collector)
#include <assert.h>
#include <stdio.h>

int main ()
{
  int i;

  GC_INIT
  para (i = 0; i <10000000; ++ i)
   {
     int ** p = (int **) GC_MALLOC (tamanho de (int *));
     int * q = (int *) GC_MALLOC_ATOMIC (tamanho de (int));
     assert (* p == 0);
     * p = (int *) GC_REALLOC (q, 2 * tamanho de (int));
     if (i% 100000 == 0)
       printf ("Tamanho do heap =% d \ n", GC_get_heap_size ());
   }
  return 0;
}


